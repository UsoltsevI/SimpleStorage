package org.example.sstorage.repositories;

import org.example.sstorage.entities.SUser;
import org.example.sstorage.entities.UserSave;

import java.util.List;
import java.util.Optional;

/**
 * Repository for abstracting work with the user database.
 *
 * @author UsoltsevI
 */
public interface SUserRepository {

    /**
     * Save user to the database.
     * The ID is generated by the database.
     *
     * @param userSave user data to save in the database
     * @return a user entity with automatically filled fields
     */
    public SUser save(UserSave userSave);

    /**
     * Check if there is a user with that ID.
     *
     * @param id ID to check
     * @return true if exists
     */
    public boolean existsById(Long id);

    /**
     * Check if there is a user with that username.
     *
     * @param username username to check
     * @return true if exists
     */
    public boolean existsByUsername(String username);

    /**
     * Find user by ID.
     *
     * @param id user ID
     * @return user if found
     */
    public Optional<SUser> findById(Long id);

    /**
     * Find user by username.
     *
     * @param username username
     * @return user id found
     */
    public Optional<SUser> findByUsername(String username);

    /**
     * Find all users.
     * Do not fill in the password field.
     *
     * @return list of found users
     */
    public List<SUser> findAll();

    /**
     * Delete user by its ID.
     *
     * @param id user ID
     * @return true if successful
     */
    public boolean deleteById(Long id);
}
